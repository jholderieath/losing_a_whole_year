labels = c("A. Historic Distribution of Percent Finishing",
"B. Historic Distribution of Percent Passing",
"C. Historic Distribution of Percent Earning an A"),
label_size = 10, hjust = 0,  ncol = 3)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0,  ncol = 3)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = -5,  ncol = 3)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 15,  ncol = 3)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 11,  ncol = 3)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 1,  ncol = 3)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0,  ncol = 3)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0,  ncol = 3, vjust = 5)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0,  ncol = 3, vjust = -5)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0,  ncol = 3, vjust = -1)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0,  ncol = 3, vjust = 1)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 1,  ncol = 3, vjust = 1)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0.5,  ncol = 3, vjust = 1)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0.75,  ncol = 3, vjust = 1)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = 0.25,  ncol = 3, vjust = 1)
cowplot::plot_grid(hist_FINISH_v,hist_PASS_v,hist_A_v,
labels = c("A. Historic Distribution \nof Percent Finishing",
"B. Historic Distribution \nof Percent Passing",
"C. Historic Distribution \nof Percent Earning an A"),
label_size = 10, hjust = -0.25,  ncol = 3, vjust = 1)
olddat3_dum %>%
filter(ID %notin% c('ANSC223','ANSC230','ANSC301','ANSC315','PLSC312','WILD314')) %>%
ggplot(aes(x = Term, y = PCT_FINISH,   group =   interaction(UPPER,ID)))+
geom_point() +
geom_smooth(method = 'lm',se=FALSE, size=1)+
stat_regline_equation(label.y=25, size = 2.5)+
facet_wrap('ID',nrow = 4)+
xlab('Term') +
ylab('Historic Percent \nFinishing') +
ggtitle('')+
theme(legend.position="none")+
scale_x_discrete(labels=c("20183" = "SP18", "20193" = "SP19", "20203" = "SP20"))+
scale_y_continuous(breaks=c(33,66,100), limits=c(0, NA))+
cowplot::theme_minimal_hgrid(11)
`%notin%` <- Negate(`%in%`)
olddat3_dum %>%
filter(ID %notin% c('ANSC223','ANSC230','ANSC301','ANSC315','PLSC312','WILD314')) %>%
ggplot(aes(x = Term, y = PCT_FINISH,   group =   interaction(UPPER,ID)))+
geom_point() +
geom_smooth(method = 'lm',se=FALSE, size=1)+
stat_regline_equation(label.y=25, size = 2.5)+
facet_wrap('ID',nrow = 4)+
xlab('Term') +
ylab('Historic Percent \nFinishing') +
ggtitle('')+
theme(legend.position="none")+
scale_x_discrete(labels=c("20183" = "SP18", "20193" = "SP19", "20203" = "SP20"))+
scale_y_continuous(breaks=c(33,66,100), limits=c(0, NA))+
cowplot::theme_minimal_hgrid(11)
??stat_regline_equation
library(ggpubr)
olddat3_dum %>%
filter(ID %notin% c('ANSC223','ANSC230','ANSC301','ANSC315','PLSC312','WILD314')) %>%
ggplot(aes(x = Term, y = PCT_FINISH,   group =   interaction(UPPER,ID)))+
geom_point() +
geom_smooth(method = 'lm',se=FALSE, size=1)+
stat_regline_equation(label.y=25, size = 2.5)+
facet_wrap('ID',nrow = 4)+
xlab('Term') +
ylab('Historic Percent \nFinishing') +
ggtitle('')+
theme(legend.position="none")+
scale_x_discrete(labels=c("20183" = "SP18", "20193" = "SP19", "20203" = "SP20"))+
scale_y_continuous(breaks=c(33,66,100), limits=c(0, NA))+
cowplot::theme_minimal_hgrid(11)
olddat3_dum %>%
filter(ID %notin% c('ANSC223','ANSC230','ANSC301','ANSC315','PLSC312','WILD314')) %>%
ggplot(aes(x = Term, y = PCT_FINISH,   group =   interaction(UPPER,ID)))+
geom_point() +
geom_smooth(method = 'lm',se=FALSE, size=1)+
stat_regline_equation(label.y=25, size = 2.5)+
facet_wrap('ID',nrow = 4)+
xlab('Term') +
ylab('Historic Percent \nFinishing') +
ggtitle('')+
theme(legend.position="none")+
scale_x_discrete(labels=c("20183" = "SP18", "20193" = "SP19", "20203" = "SP20"))+
scale_y_continuous(breaks=c(33,66,100), limits=c(0, NA))+
cowplot::theme_minimal_hgrid(11)
hist_PASS <-  olddat3_dum %>%
filter(ID %notin% c('ANSC223','ANSC230','ANSC301','ANSC315','PLSC312','WILD314')) %>%
ggplot(aes(x = Term, y = PCT_PASS,   group =   interaction(UPPER,ID)))+
geom_point() +
geom_smooth(method = 'lm',se=FALSE, size=1)+
stat_regline_equation(label.y=25, size = 2.5)+
facet_wrap('ID',nrow = 4)+
xlab('Term') +
ylab('Historic Percent \nPassing') +
scale_y_continuous(breaks=c(33,66,100), limits=c(0, NA))+
ggtitle('')+
theme(legend.position="none")+
scale_x_discrete(labels=c("20183" = "SP18", "20193" = "SP19",  "20203" = "SP20"))+
cowplot::theme_minimal_hgrid(11)
plotly::ggplotly(hist_PASS)
warnings()
warning()
ggplotly(predict_A)
ggplotly(predict)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(readxl)
library(plotly)
library(tidymodels)
library(poissonreg)
library(ggeffects)
library(jtools)
library(kableExtra)
library(gridExtra)
library(cowplot)
library(lmtest)
library(sandwich)
library(ggpubr)
`%notin%` <- Negate(`%in%`)
set.seed(4798)
data <- read_excel("Grades by Instructor and Course - Spring 2018 thru Winter 2021.xls")%>%
rename(grade = `Grade Awarded`) %>%
filter(grade != 'AU') %>%
mutate(termC = as.character(Term)) %>%
mutate(Instructor = forcats::as_factor(Instructor),
Course = forcats::as_factor(Course),
Term = forcats::as_factor(termC),
Grade = factor(grade, levels = c("A", "B", "C", "D", "F", "W", "S", "IC"))) %>%
mutate(Dept = forcats::as_factor(str_extract(Course, '[:alpha:]{3,4}')),
Course_Number = forcats::as_factor(str_extract(Course, '[:digit:]{3}')),
Section = forcats::as_factor((str_extract(Course,'[:alnum:]{3}$')))) %>%
mutate(Honors = forcats::as_factor(ifelse(str_detect(as.character(Section),"^H")==TRUE,1,0)),
Online = forcats::as_factor(ifelse(str_detect(as.character(Section),"^V")==TRUE,1,0))) %>%
mutate(Upper = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 300,1,0))) %>%
mutate(Grad = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 500,1,0))) %>%
unite("ID", Dept:Course_Number, sep = "", remove = FALSE) %>%
mutate(ID = forcats::as_factor(ID)) %>%
unite(FULL_ID, Dept:Course_Number:Section, sep = "-", remove = FALSE)%>%
dplyr::select(-c(termC,grade,Course))
data$Instructor <- data$Instructor %>% fct_anon()
data$pfw <- fct_recode(data$Grade, "PASS" = "A", "PASS" = "B", "PASS" = "C", "PASS" = "S", "FAIL" = "D", "FAIL" = "F")
data$term_label <- fct_recode(data$Term, "SPRING 18" = "20183", "SUMMER 18" = "20184", "FALL 18" = "20191", "WINTER 18-19" = "20192", "SPRING 19" = "20193", "SUMMER 19" = "20194", "FALL 19" = "20201", "WINTER 19-20" = "20202", "SPRING 20" = "20203", "SUMMER 20" = "20204", "FALL 20" = "20211", "WINTER 20-21" = "20212")
data$term_label <- fct_relevel(data$term_label,"SPRING 18", "SUMMER 18", "FALL 18", "WINTER 18-19", "SPRING 19", "SUMMER 19", "FALL 19", "WINTER 19-20", "SPRING 20", "SUMMER 20", "FALL 20", "WINTER 20-21")
data$quarter <- fct_recode(data$term_label, "SPRING" = "SPRING 18","SUMMER" = "SUMMER 18","FALL" = "FALL 18","WINTER" = "WINTER 18-19","SPRING" = "SPRING 19","SUMMER" = "SUMMER 19","FALL" = "FALL 19", "WINTER" = "WINTER 19-20","SPRING" = "SPRING 20","SUMMER" = "SUMMER 20","FALL" = "FALL 20","WINTER" = "WINTER 20-21")
data$quarter <- fct_relevel(data$quarter, "FALL", "WINTER", "SPRING", "SUMMER")
#filter(str_detect(termC, "3$")) %>%
percent_grade <- data %>%
count(term_label, Grade) %>%
group_by(term_label) %>%
mutate(Percent = n / sum(n) * 100) %>%
ungroup()
percent_pfw <- data %>%
count(term_label, pfw) %>%
group_by(term_label) %>%
mutate(Percent = n / sum(n) * 100) %>%
ungroup() %>%
filter(pfw == "PASS" | pfw == "FAIL" | pfw == "W") %>%
arrange(term_label,pfw)
percent_pfw$order <- fct_recode(percent_pfw$term_label, "1" = "SPRING 18","2" = "SUMMER 18","3" = "FALL 18","4" = "WINTER 18-19","5" = "SPRING 19","6" = "SUMMER 19","7" = "FALL 19", "8" = "WINTER 19-20","9" = "SPRING 20","10" = "SUMMER 20","11" = "FALL 20","12" = "WINTER 20-21")
percent_pfw$order <- as.numeric(as.character(percent_pfw$order))
percent_pfw$term_label <- fct_relevel(percent_pfw$term_label,"SPRING 18", "SUMMER 18", "FALL 18", "WINTER 18-19", "SPRING 19", "SUMMER 19", "FALL 19", "WINTER 19-20", "SPRING 20", "SUMMER 20", "FALL 20", "WINTER 20-21")
percent_pfw <- percent_pfw %>%
arrange(order,pfw)
p <- ggplot(percent_pfw, aes(x = pfw, y= Percent, fill = term_label)) +
geom_bar(stat = "identity", position = position_dodge(width = .9), width = .8) +
geom_text(aes(label = round(Percent,1)), position = position_dodge(width = .9), vjust = 0.2, hjust = -0.1, size = 3,angle = 90) +
scale_fill_manual("Term",values=c("blue4","darkorange4","green4","gray4","blue3","darkorange3","green3","gray3","blue2","darkorange2","green2","gray2","blue1","darkorange1","green1","gray1"))+
scale_y_continuous(expand = c(0.1, .1))+
xlab("Outcome")+
theme(axis.text.x=element_text(hjust=1))
fig <- plotly::ggplotly(p)
fig
#"PASS" = "PASS \n(A, B, OR C)", "FAIL" = "FAIL \n(D OR F)", "W" = "W")
#scale_x_discrete(labels=c("SPRING 18","SUMMER 18","FALL 18","WINTER 18-19","SPRING 19", "SUMMER 19","FALL 19", "WINTER 19-20", "SPRING 20","SUMMER 20", "FALL 20", "WINTER 20-21"))+
percent_grade$term_label <- fct_relevel(percent_grade$term_label,"SPRING 18", "SUMMER 18", "FALL 18", "WINTER 18-19", "SPRING 19", "SUMMER 19", "FALL 19", "WINTER 19-20", "SPRING 20", "SUMMER 20", "FALL 20", "WINTER 20-21")
p <- percent_grade %>%
ggplot(aes(x = Grade, y = Percent, fill = term_label)) +
geom_bar(stat = "identity", position = position_dodge(width = .9), width = .8)+
scale_fill_manual("Term",values=c("blue4","darkorange4","green4","gray4","blue3","darkorange3","green3","gray3","blue2","darkorange2","green2","gray2","blue1","darkorange1","green1","gray1"))+
scale_y_continuous(expand = c(0.1, .1)) +
annotate("text",x = 1.38, y = 54, label = "SP20")
plotly::ggplotly(p)
# geom_text(aes(label = round(Percent,1)), position = position_dodge(width = .9), vjust = 0.2, hjust = -0.1, size = 3,angle = 90) +
#  add_case(Term = "20193",Grade = "S",n= 0,Percent = 0)%>%
#  add_case(Term = "20183",Grade = "IC",n= 0,Percent = 0)%>%
#  add_case(Term = "20193",Grade = "IC",n= 0,Percent = 0)%>%
percent_grade <- data %>%
count(Dept,term_label, Grade) %>%
group_by(Dept,term_label) %>%
mutate(Percent = n / sum(n) * 100) %>%
ungroup() %>%
filter(Grade == "A")
percent_grade$term_label <- fct_relevel(percent_grade$term_label,"SPRING 18", "SUMMER 18", "FALL 18", "WINTER 18-19", "SPRING 19", "SUMMER 19", "FALL 19", "WINTER 19-20", "SPRING 20", "SUMMER 20", "FALL 20", "WINTER 20-21")
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "Term"
)
y <- list(
title = "Percent Earning an A"
)
plot_ly(data = percent_grade, x= ~term_label, y= ~Percent, type = 'box') %>% layout(
title = "Percent of Students Earning an A by Department and Term",
xaxis = x,
yaxis = y
)
summary(data) %>%
kbl() %>%
kable_minimal()%>%
scroll_box(width = "100%", height = "75%")
d2 <- data %>%
filter(ID != 'OTHER')%>%
fastDummies::dummy_cols() %>%
group_by(ID,Instructor,FULL_ID,term_label,Online,Honors)%>%
summarise(PASSING = sum(Grade_A,Grade_B,Grade_C,Grade_S),
FAILING = sum(Grade_D,Grade_F),
FINISHING = sum(pfw_PASS,pfw_FAIL),
NOTFINISHING = sum(pfw_W,pfw_IC),
n = n(),
EarnA = sum(Grade_A))
d3 <- d2 %>%
mutate(PCT_PASS = round(PASSING/(PASSING+FAILING)*100),
PCT_FINISH = round(FINISHING/(FINISHING+NOTFINISHING)*100),
PCT_A = round(EarnA/(PASSING+FAILING)*100)
) %>%
mutate(Course_Number = forcats::as_factor(str_extract(ID, '[:digit:]{3}')),
Upper = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 300 & as.numeric(as.character(Course_Number)) < 500,1,0)),
Grad = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 500,1,0))
) %>%
select(-Course_Number,-PASSING,-FAILING,-FINISHING,-NOTFINISHING,-n,-EarnA)
d3_pass <- d3 %>%
select(-PCT_FINISH,-PCT_A)
# Put 3/4 of the data into the training set
data_split <- initial_split(d3_pass, prop = 3/4)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
pass_rec <-
recipe(PCT_PASS ~ ., data = train_data)  %>%
step_dummy(ID,Instructor,term_label, -all_outcomes())%>%
update_role(ID, Instructor, FULL_ID, term_label, new_role = "ID") %>%
step_zv(all_predictors())
#summary(pass_rec)
#poisson----------
poisson_mod <-
poisson_reg() %>%
set_engine("glm")
# workflow
pass_poisson_wflow <-
workflow() %>%
add_model(poisson_mod) %>%
add_recipe(pass_rec)
#pass_poisson_wflow
pass_poisson_fit <-
pass_poisson_wflow %>%
fit(data = train_data)
model_table <- pass_poisson_fit %>%
pull_workflow_fit() %>%
tidy()
#test the poisson model
predict_pass <- predict(pass_poisson_fit, test_data) %>%
cbind(Truth = test_data$PCT_PASS)
ggplot(predict_pass,aes(Truth,.pred))+
geom_point(alpha = 0.5)+
geom_abline(lty = 2, color = "gray80", size = 1.5)+
labs(
x = "Truth",
y = "Predicted Percent Passing"
)
d2 <- data %>%
filter(ID != 'OTHER')%>%
fastDummies::dummy_cols() %>%
group_by(ID,Instructor,FULL_ID,term_label,Online,Honors)%>%
summarise(PASSING = sum(Grade_A,Grade_B,Grade_C,Grade_S),
FAILING = sum(Grade_D,Grade_F),
FINISHING = sum(pfw_PASS,pfw_FAIL),
NOTFINISHING = sum(pfw_W,pfw_IC),
n = n(),
EarnA = sum(Grade_A))
d3 <- d2 %>%
mutate(PCT_PASS = round(PASSING/(PASSING+FAILING)*100),
PCT_FINISH = round(FINISHING/(FINISHING+NOTFINISHING)*100),
PCT_A = round(EarnA/(PASSING+FAILING)*100)
) %>%
mutate(Course_Number = forcats::as_factor(str_extract(ID, '[:digit:]{3}')),
Upper = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 300 & as.numeric(as.character(Course_Number)) < 500,1,0)),
Grad = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 500,1,0))
) %>%
select(-Course_Number,-PASSING,-FAILING,-FINISHING,-NOTFINISHING,-n,-EarnA)
d3_A <- d3 %>%
select(-PCT_FINISH, -PCT_PASS)
# Put 3/4 of the data into the training set
data_split <- initial_split(d3_A, prop = 3/4)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
A_rec <-
recipe(PCT_A ~. , data = train_data)  %>%
step_dummy(ID,Instructor,term_label, -all_outcomes())%>%
update_role(ID, Instructor, FULL_ID, term_label, new_role = "ID") %>%
step_zv(all_predictors())
#summary(pass_rec)
#poisson----------
poisson_mod <-
poisson_reg() %>%
set_engine("glm")
# workflow
A_poisson_wflow <-
workflow() %>%
add_model(poisson_mod) %>%
add_recipe(A_rec)
#pass_poisson_wflow
A_poisson_fit <-
A_poisson_wflow %>%
fit(data = train_data)
model_table <- A_poisson_fit %>%
pull_workflow_fit() %>%
tidy()
#test the poisson model
predict_A <- predict(A_poisson_fit, test_data) %>%
cbind(Truth = test_data$PCT_PASS)
d2 <- data %>%
filter(ID != 'OTHER')%>%
fastDummies::dummy_cols() %>%
group_by(ID,Instructor,FULL_ID,term_label,Online,Honors)%>%
summarise(PASSING = sum(Grade_A,Grade_B,Grade_C,Grade_S),
FAILING = sum(Grade_D,Grade_F),
FINISHING = sum(pfw_PASS,pfw_FAIL),
NOTFINISHING = sum(pfw_W,pfw_IC),
n = n(),
EarnA = sum(Grade_A))
d3 <- d2 %>%
mutate(PCT_PASS = round(PASSING/(PASSING+FAILING)*100),
PCT_FINISH = round(FINISHING/(FINISHING+NOTFINISHING)*100),
PCT_A = round(EarnA/(PASSING+FAILING)*100)
) %>%
mutate(Course_Number = forcats::as_factor(str_extract(ID, '[:digit:]{3}')),
Upper = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 300 & as.numeric(as.character(Course_Number)) < 500,1,0)),
Grad = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 500,1,0))
) %>%
select(-Course_Number,-PASSING,-FAILING,-FINISHING,-NOTFINISHING,-n,-EarnA)
d3_A <- d3 %>%
select(-PCT_FINISH, -PCT_PASS)
# Put 3/4 of the data into the training set
data_split <- initial_split(d3_A, prop = 3/4)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
A_rec <-
recipe(PCT_A ~. , data = train_data)  %>%
step_dummy(ID,Instructor,term_label, -all_outcomes())%>%
update_role(ID, Instructor, FULL_ID, term_label, new_role = "ID") %>%
step_zv(all_predictors())
#summary(pass_rec)
#poisson----------
poisson_mod <-
poisson_reg() %>%
set_engine("glm")
# workflow
A_poisson_wflow <-
workflow() %>%
add_model(poisson_mod) %>%
add_recipe(A_rec)
#pass_poisson_wflow
A_poisson_fit <-
A_poisson_wflow %>%
fit(data = train_data)
model_table <- A_poisson_fit %>%
pull_workflow_fit() %>%
tidy()
#test the poisson model
predict_A <- predict(A_poisson_fit, test_data) %>%
cbind(Truth = test_data$PCT_A)
ggplot(predict_A,aes(Truth,.pred))+
geom_point(alpha = 0.5)+
geom_abline(lty = 2, color = "gray80", size = 1.5)+
labs(
x = "Truth",
y = "Predicted Percent Passing"
)
abline_A <- ggplot(predict_A,aes(Truth,.pred))+
geom_point(alpha = 0.5)+
geom_abline(lty = 2, color = "gray80", size = 1.5)+
labs(
x = "Truth",
y = "Predicted Percent Passing"
)
plotly::ggplotly(abline_A)
model_table <- A_poisson_fit %>%
pull_workflow_fit() %>%
tidy()
model_table
A_poisson_fit
A_poisson_fit %>%
pull_workflow_fit()
data %>%
group_by(term_label) %>%
summarize(enrollment = n)
data %>%
group_by(term_label) %>%
summarize(count())
data %>%
group_by(term_label) %>%
summarize(n = n())
data %>%
group_by(term_label) %>%
summarize(n = n()) %>%
ggplot(aes(x = term_label, y = n, fill = term_label)) +
geom_bar(stat = "identity", position = position_dodge(width = .9), width = .8)+
scale_fill_manual("Term",values=c("blue4","darkorange4","green4","gray4","blue3","darkorange3","green3","gray3","blue2","darkorange2","green2","gray2","blue1","darkorange1","green1","gray1"))
View(data)
library(rJava)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(readxl)
library(plotly)
library(tidymodels)
library(poissonreg)
library(ggeffects)
library(jtools)
library(kableExtra)
library(gridExtra)
library(cowplot)
library(lmtest)
library(sandwich)
library(ggpubr)
`%notin%` <- Negate(`%in%`)
set.seed(4798)
data <- read_excel("Grades by Instructor and Course - Spring 2018 thru Winter 2021.xls")%>%
rename(grade = `Grade Awarded`) %>%
filter(grade != 'AU') %>%
mutate(termC = as.character(Term)) %>%
mutate(Instructor = forcats::as_factor(Instructor),
Course = forcats::as_factor(Course),
Term = forcats::as_factor(termC),
Grade = factor(grade, levels = c("A", "B", "C", "D", "F", "W", "S", "IC"))) %>%
mutate(Dept = forcats::as_factor(str_extract(Course, '[:alpha:]{3,4}')),
Course_Number = forcats::as_factor(str_extract(Course, '[:digit:]{3}')),
Section = forcats::as_factor((str_extract(Course,'[:alnum:]{3}$')))) %>%
mutate(Honors = forcats::as_factor(ifelse(str_detect(as.character(Section),"^H")==TRUE,1,0)),
Online = forcats::as_factor(ifelse(str_detect(as.character(Section),"^V")==TRUE,1,0))) %>%
mutate(Upper = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 300,1,0))) %>%
mutate(Grad = forcats::as_factor(ifelse(as.numeric(as.character(Course_Number)) >= 500,1,0))) %>%
unite("ID", Dept:Course_Number, sep = "", remove = FALSE) %>%
mutate(ID = forcats::as_factor(ID)) %>%
unite(FULL_ID, Dept:Course_Number:Section, sep = "-", remove = FALSE)%>%
dplyr::select(-c(termC,grade,Course))
data$Instructor <- data$Instructor %>% fct_anon()
data$pfw <- fct_recode(data$Grade, "PASS" = "A", "PASS" = "B", "PASS" = "C", "PASS" = "S", "FAIL" = "D", "FAIL" = "F")
data$term_label <- fct_recode(data$Term, "SPRING 18" = "20183", "SUMMER 18" = "20184", "FALL 18" = "20191", "WINTER 18-19" = "20192", "SPRING 19" = "20193", "SUMMER 19" = "20194", "FALL 19" = "20201", "WINTER 19-20" = "20202", "SPRING 20" = "20203", "SUMMER 20" = "20204", "FALL 20" = "20211", "WINTER 20-21" = "20212")
data$term_label <- fct_relevel(data$term_label,"SPRING 18", "SUMMER 18", "FALL 18", "WINTER 18-19", "SPRING 19", "SUMMER 19", "FALL 19", "WINTER 19-20", "SPRING 20", "SUMMER 20", "FALL 20", "WINTER 20-21")
data$quarter <- fct_recode(data$term_label, "SPRING" = "SPRING 18","SUMMER" = "SUMMER 18","FALL" = "FALL 18","WINTER" = "WINTER 18-19","SPRING" = "SPRING 19","SUMMER" = "SUMMER 19","FALL" = "FALL 19", "WINTER" = "WINTER 19-20","SPRING" = "SPRING 20","SUMMER" = "SUMMER 20","FALL" = "FALL 20","WINTER" = "WINTER 20-21")
data$quarter <- fct_relevel(data$quarter, "FALL", "WINTER", "SPRING", "SUMMER")
#filter(str_detect(termC, "3$")) %>%
save(data,file = "data.csv")
write_csv(data,file = "data.csv")
